### Data binding in Nette Forms

A **form** in your app sometimes match exactly to fields of one **entity**, but it's not always the case. This **data-binding** should be more general, e.g. one form can provide editing of a **hierarchy** of entities at once. And it should be **bi-directional**, pulling data from model and also storing it back.

Usually you need to write lot's of boilerplate code, one chunk which populates the form fields and other chunk which reads user's values and stores them back to entity's properties. In Java course at my University, we were shown how data-binding works there using *ExperssionEngine*, which inspired me. Something similar can be added to *Nette Forms* easily, in three steps:

1/ **binding** - I slightly extended Nette by adding one property to each form control. You can see the change in my "fork":https://github.com/juzna/nette/commit/76b9dae5bf3fcbfd28cdf2d119f955e57bcd61c1, but it's not in official release yet.
To use it, just bind the controls to model's properties like in this example:
/---code php
$frm->addText('name', 'Name')->setRequired()->bind('name');
$frm->addText('username', "Username")->setRequired()->bind('credentials[0].username');
\---
It doesn't do anything by itself, only each control knows what it should be mapped to or from. And as you can see, you can specify non-trivial bindings like `credentials[0].username`.

2/ **populating the form** is done in a separate component, e.g. in the form itself (see this "example":https://gist.github.com/1523774 of *EntityForm* class). You just `$frm->bind($entity);` and the form loads all it needs from the entity.

3/ **populating the entity** is easy again, e.g. by `$frm->populateEntity($entity);` which just takes all values in form and stores them into existing entity.


### How to create new models?
After a form for adding new user has been submitted, you can create an **empty model** and get it **populated** from the form:
/---code php
// Create empty model
$user = new IdentityEntity;
$user->addCredentials(new PasswordEntity($user));

// Populate it
$frm->populateEntity($user);
\---

### Editing existing data
... is very easy, all you need is just to load existing model from repository and bind it to the form.

### Work in progress
So far only a raw idea, I'm working on this. Comments are welcome...



----------
## Comments

**&lt;SYSTEM FAILURE&gt;** | 2011-12-27
I had been thinking about the same problem several months, but as my knowledge about data/object models is so short I couldn't come up with something as tidy as this.

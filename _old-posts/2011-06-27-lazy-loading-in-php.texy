### Lazy-loading in PHP

### Introduction

**Lazy-loading** is a useful *design pattern* for deferred object loading to the time when it is needed for the first time. It may save some memory, requests to database etc. It is very often used in combination of *Object Relational Mapping* (ORM), when objects (or object graphs) are mapped into rows in relational database and vice-versa. *Lazy-loading* plays very important role here, as it allows to load only some data from the database, and *lazy-load* more when it's really needed.

Consider an example, having class *Payment* describing a general payment e.g. in an invoicing system. This payment has a relation to the *Customer* class, representing our customer who made it. In *Customer* class we have some info about the customer himself, and also reference to *Address* class representing his billing address.

PHP code may look like this:
/---code php
class Address {
  public $id;
  public $street;
  public $town;
}

class Customer {
  public $id;
  public $name;
  public $address;
}

class Payment {
  public $id;
  public $amount;
  public $customer;
}
\---

In SQL database these can be represented as three tables:
/---
Payment(id, amount, customer_id)
Customer(id, name, address_id)
Address(id, street, town)
\---

Now you store some data in the database and want to access them easily:
/---code php
$payment = $db->getRepository('Payment')->find(123);
echo $payment->customer->address->town;
\---

Here comes *lazy-loading* and loads only those data, which you need; it means as soon as you access *customer* property, the customer will be loaded from database, and the same happens with *address*.

<a name="doctrine-way">
### Doctrine's way

There is a great *ORM framework* called "Doctrine":http://doctrine-project.org, which will do all the mapping for you. However, for it to work, there are some limitations:
- all the properties cannot be *public* (but *protected*) and you can use magic "__get":http://www.php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.members to access them,
- Doctrine will generate *Proxy classes*, which will do the lazy-loading,
- because of proxy classes, you cannot use *private* properties,
- proxy classes are *auto generated code*, which many people (including me) may not like,
- magic getters will not work always, e.g. if you access properties of another object of the same class, you have direct access to them and proxy cannot intercept the call,
- you cannot use *final* classes nor methods,
- working with real objects sometimes and with proxies later can be confusing,
- if you want just *customer*'s ($payment->customer->id), whole *customer* objects will be populated even when it's not necessary.

There is no other way how to make this work with current PHP :(

### Let's make it possible

Imagine a new special value in PHP. Like there is *null* already, this will be called *uninitialized*. When a property has this value and you will try to access it, database layer will intercept the call and initialize the value. All the drawbacks from previous section are now gone.


## __initialize magic method

I added support for new magic method *__initialize($name)*, which will be called everytime you try to access a property with *uninitialized* value. This magic method can load data (from database) and populate the property. Or, once data are loaded from database, it can populate all *uninitialized* properties of the object.

This can be useful in some cases, but not that nice for a DB layer. Each class would have to implement *__initialize* method, so let's add some more.

## spl_initialize_register et al.

With *class autoloading* you can use *spl_autoload_register* to register a callback, which is called everytime a non existing class should be used. This callback function should load the class, so that everything can continue easily while classes are automatically **lazy-loaded**.

Let's apply the same idea onto **lazy-loading of property values**. With *spl_initialize_register* you can register a callback which will be called every time, when it is not possible to initialize a property by *__initialize* method. Database layer can register such a callback and *lazy-load* all the data when it's needed.

See more examples in "gist":https://gist.github.com/1046613.

### But...

people may say it's too magic, and that there are other ways to handle *lazy-loading* which are working already. However, I argue that their ways are more difficult; or that they have some WTF effects. There is no *best solution*.


## Exporting all payments

Imagine an export, which would like to use all payments with their IDs, amount and customer IDs. With lazy-loading suggested in this blogpost, it's so easy:
/---code php
foreach($db->getRepository('Payment')->getAll() as $payment) {
  my_whatever_export($payment->id, $payment->amount, $payment->customer->id);
}
\---

In this example, only one query is sent to database and for each payment a customer object is created, which has however only *id* populated and the rest of values are *uninitialized*. But because we want just the *id*, its OK.

Yep, with Doctrine, you can use DQL and array hydrate mode, so you will get only arrays and not the objects itself. This may be complicated, if you would like to call some methods on *Payment* class (like computing VAT amount). OK, you can use partial objects. But still, in more complex cases, you cannot be sure that everything you need is really loaded. With a full PHP support, you can be sure all values are loaded when they're needed.


### Summary

This is just hack of PHP, a proof of concept. Nobody tells you to use it on your production servers. But try to think about it: **can it make your life easier?**

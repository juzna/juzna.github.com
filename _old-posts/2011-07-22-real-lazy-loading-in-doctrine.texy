### Real lazy-loading in Doctrine

Last week I wrote about "Lazy-loading in PHP":http://blog.juzna.cz/2011/06/lazy-loading-in-php/ and how it can be useful in database layers. I wondered how difficult it would be to let "Doctrine ORM":http://doctrine-project.org use this new feature. It showed up to be very easy!

When Doctrine needs to create a deferred object while knowing only it's primary key, it calls a *Proxy factory* class. This factory will generate a *proxy class* for your particular *model class* by extending it and overriding all methods. Each *proxy method* will try to *initialize* the object first, before calling original *model method*. This approach has some drawbacks and WTF effects which I "mentioned":http://blog.juzna.cz/2011/06/lazy-loading-in-php/#doctrine-way last time.

With my approach to *lazy-loading*, we can reuse the same pattern by just providing a different *factory*. Actually, such a **UninitializedProxyFactory**:https://github.com/juzna/doctrine2/blob/master/lib/Doctrine/ORM/Proxy/UninitializedProxyFactory.php showed up to be very easy: just 6 lines of code to create a "proxy" object (understand as an object with just a primary key while the rest of properties are *uninitialized*) and 7 lines of code to initialize such an object as soon as it's necessary. No actual *proxy classes* are generated as with original Doctrine ProxyFactory, just **partially initialized** initialized *model objects* are created and returned by the factory.

## Benefits

You can try using it right now, just compile PHP with *uninitialized* support and tell Doctrine to use another *ProxyFactory*. You'll discover that you

- can define properties with any type of visibility you like; whether a property is *public*, *protected* or *private*, it will just work,
- can use *final* methods or classes wherever you like,
- won't have any *auto-generated* code in your project,
- will always work with your *model classes*, so *get_class* function will work as expected,
- will be able to access primary key of partially initialized object without loading them all,
- won't need to care that you've forgotten to specify some columns in partial loading of objects, because they will be loaded when needed.

The drawback is a little piece of magic, something that PHP does for you **automagically** and you may not realize it when searching for a problem.

PS: I'll be happy if you add any comments!

### Lightweight closures in PHP

I kinda like closures as they are implemented in *JavaScript*. They're seem so lightweight, easy to use and to write. You don't need much code and you'll get just used to them and use them everywhere. This was not possible before PHP 5.3 and people use tended not to use any kind of callbacks unless really necessary. It was just such a pain to use them. Thankfully new current version of PHP brought them. I still like something about *JavaScript closures* more than about those in *PHP*.

**Disclaimer**: this post is about a proof of concept from my series "Diving into PHP core":http://blog.juzna.cz/2011/07/diving-into-php-core/, so it's something what you cannot find in mainstream PHP version. It just describes an area I miss in PHP and proposes a solution to it, which may seem crazy, or not. 

It is **visibility of variables**, what I like more in JavaScript. I mean in *PHP*, variables within functions (or methods) are *local* and visible only within that particular function. Or, you have *global variables* visible from everywhere. This was perfectly enough in older versions of PHP where functions could not be nested, i.e. code was either inside a function, or outside of it. Nothing else! PHP 5.3 introduced *closures* and now you can define functions within functions. Or, as someone said: "Yo Dawg, I heard you like functions. So in PHP, you can put a function in a function while you write a function." In this new world, you may like a variable to be visible both in *the outer function* and also in *the inner function*. This is what makes the difference between *closures* and *anonymous functions* -- closures can "close" some variables inside them. Anyway, this was available in *JavaScript* for many years and now it's possible in PHP. Only the way how it's done is different.

## Explicit closures

I'll start with JavaScript. All the variables visible within a particular function are **implicitly visible** in any nested functions. You cannot exclude them, but you may override them with local variables in the *inner function* (by means of keyword `var`).

On the other hand, in PHP you have to **explicitly specify** all such variables you want to *pass* to an inner anonymous function. It may be useful as you can exactly specify which variables to pass there and thus have more control over your script, but it may also be annoying and to much writing, especially if you'd like to create shortish closures or ones with more variables. What if would be possible to define such lightweight closures, which share variables with *outer function*. I tried it by defining new keyword *closuref*, see this example:
/---code php
function generateSomeList() {
    $out = array();

    $firstName = 'John'; $lastName = 'Lewis';
    generator(5, closuref($i) { $out[] = "$firstName $lastName $i"; });

    $name = 'Paul Smith';
    generator(3, closuref($i) { $out[] = "$name $i"; });

    return $out;
}
\---

This is my raw idea, which I tried to add into PHP. A **closuref** is just like an ordinary *anonymous function*, but it doesn't have it's own *symbol space* (understand as local variables). Instead, it shares all the variables with the function where it is defined. So even `$i` is a local variable in `generateSomeList()` function.

What do you think about it? Looks interesting, or doesn't it make sense at all? It seems useful me. And anyway, this showed up to be a good ground for my next idea I want to implement ;) Stay tuned

**Note**: *closuref* may seem as a weird keyword to use. I wanted to name it just *closure*, but this would collide with other PHP stuff. So *closuref* is combination of *closure* and *function*. Anyway, it could have any name.


**Edited**: after couple of days and comments I realized *lightweight closures* may not be that useful, but actually it would make sense just with a different name -- "**blocks**":http://blog.juzna.cz/2011/07/closures-vs-code-blocks/, as I wrote in another blog post.




----------
## Comments

**Filip Procházka (@HosipLan)** | 2011-07-28
Well done, but why haven't you done it like in javascript? Does realy makes sense to you, to let the $i be in generateSomeList() scope?


**juzna.cz** | 2011-07-28
Filip, you're right that it would probably be a better approach. I had basically two reasons ;) First, that such change to PHP would be much more difficult and I wasn't sure if I was able to do that. Nevertheless, I will try it ;) Second reason was my aim: I wanted it to get as close to blocks of code as possible. I.e. just { statement_list }, without any keyword which would make sense to have the same symbol table as outer block. I'm just not that far yet.
Thanks anyway for a good comment


**信用調查** | 2011-07-28
There are tons of websites that simply make useless information,but yours are different , I am so happy to read your post,2


**Jakub Vrána** | 2011-07-28
JavaScript closures implementation is consistent with common functions - they see global variables by default.

PHP closures implementation is also consistent with common functions - they don't see global variables by default.

I like this behavior of PHP and I think that it is less error-prone approach than JavaScript's "everything is visible everywhere".


**juzna.cz** | 2011-07-30
Jakub: this type of closures could be good e.g. with your "tryFinally()":http://php.vrana.cz/finally.php function, because you would normally want these try and finally blocks to be as close to normal blocks of code as possible ;)


**Karel Čížek** | 2011-07-31
In my opinion explicit visibility was chosen just because PHP have no `var' keyword for defining new local variable (and backward compatibility, of course).

What about this syntax: `function ($args) use(*) {}'


**juzna.cz** | 2011-08-01
Karel: I actually tried several different forms of syntax, starting from `light function($args)`, `fake function($args)` or `closuref($args)`. But I was more worried about semantics. A later I realized that maybe I shouldn't call them *closures* at all. Have a look at my other "post":http://blog.juzna.cz/2011/07/closures-vs-code-blocks/, where I discuss further development of that idea.

Btw I guess your syntax would be much more difficult to implement since I needed altering compilation of such "closures/blocks" and PHP uses LALR(1) grammar and thus needs to know soon what will come next. Not sure anyway, maybe this could be done easily as well and I just can't see it.

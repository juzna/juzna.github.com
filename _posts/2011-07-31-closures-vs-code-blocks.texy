### Closures vs. code blocks

I wrote a post about "lightweight closures":http://blog.juzna.cz/2011/07/lightweight-closures-in-php couple of days ago, but I didn't realize the real meaning of them. That let most people, including myself, confused. When I read "Jakub's":http://vrana.cz blogpost about "*finally-clause*":http://php.vrana.cz/finally.php (not English, but you can try using Google Translate) today, I realized what are my *lightweight closures* really about.

### Code blocks

Saying they were *closures* wasn't probably the best idea. Actually I just did it only because I based them on closure implementation in PHP, while creating something different eventually. So even keyword *closuref* was not chosen wisely.

What I really wanted to create are **addressable codeblocks**. But what is such a *addressable codeblock*? Understand it as a block of code normally seen between curly brackets, which can be however assigned to a variable or passed as argument to a function. This is similar to Ruby which takes it even to a higher level and sees every block as an object. Changing PHP to behave this way for all blocks would be too aggressive (if possible at all), so here comes my new keyword to create them explicitly when necessary. 

### Half closures, half blocks

What I call a **closuref** now should probably have a better name, maybe *block* or *codeblock*. We need to be careful however not to make a commonly used word a keyword, as this would cause many scripts to end up with syntax errors. For purposes of this post, I'll try to use **block** as the keyword, which however in my implementation is called *closuref* at the moment. I hope using "block" will show this new *language construct* in an easier-to-understand way.

Imagine following code:
/---code php
// Normal way
for($i = 1; $i <= 5; $i++) {
  echo $i, "\n";
}

// With block support
function repeat($count, $block) { ... }
$i = 1;
repeat(5, block { echo $i++, "\n"; });
\---

In *normal way*, you specify a classic block of code to be executed in each cycle. That block has the same symbol table as the function where it is defined, i.e. it can see all the variables there. Such block cannot be handled on its own and has to always stand in a place where PHP supports it (such as after for or while cycles, or after if condition, etc.). It cannot be assigned to a variable, passed as argument or called separately from your PHP code.

In second part of example you can see real **block**, which is **addressable**. It can be assigned to a variable or passed to a function as an argument. It is not limited to predefined language constructs, so it can stand anywhere you want. And it can be called by your PHP code separately on the rest of function. But it still behaves similarly to that block of code shown couple of lines above -- it has the same *symbol table* as the function it is defined within. So all the variables are visible or changeable in the same way as if it was a normal block of code.

On the other side, function *repeat* sees such a *block* as a *closure* and cannot really tell the difference between a normal *closure* and a *block*. Because it doesn't need to. Function *repeat* just wants anything *callable*, so that it can repeat it five times. Whether it's a *closure* with own local variables, or a *block* with variables shared with outer function, *repeat* just doesn't care and does whatever it is supposed to do -- repeating something for a given number of cycles.


### Finally and other possible new things

As Jakub says in his "post":http://php.vrana.cz/finally.php I mentioned in the introduction, it is possible to emulate *try-catch-finally* even when it's not supported by PHP yet, by means of *closures*. Just look how simple it can be to add *finally* support (code by Jakub Vrana):
/---code php
/** Emulating finally block
* @param callback Main code
* @param callback Block called after main code
* @return mixed Return value of main code
* @throws Exception In case of exception in main code or finally block
* @copyright Jakub Vrána, http://php.vrana.cz/
*/
function tryFinally($try, $finally) {
    try {
        $return = $try();
        $finally();
        return $return;
    } catch (Exception $e) {
        $finally();
        throw $e;
    }
}
\---

Such a short function and it adds support for *finally* emulation. All you need is to write *closures* instead of simple blocks of code. However you will separate such block into different functions and thus you won't be able to see same variables as before, because each closure has its own symbol table. This can be solved by means of *use* (as Jakub also shows in his post). However, you have to always **explicitly specify** such variables to be shared.

Having *block* support, such code can be much easier:
/---code php
$filename = tempnam("", "tmp");
tryFinally(block {
    try {
        processData($filename);
        return true;
    } catch (FileException $e) {
        return false;
    }
}, block { // finally
    unlink($filename);
});
\---

*Block*s share the same symbol table so you don't need to specify which variables to pass to them. It would make much more sense in larger blocks with many variables, or where variables are being changed.

## Measurements

Another use case can be simple function for measuring time of operations:
/---code php
function measureTime($comment, Closure $block) {
  $start = microtime(true);
  $block->__invoke(); // Execude given block of code
  $duration = microtime(true) - $start;
  log2file("Duration of $comment: $duration seconds");
}

$a = 1; $b = 2;
measureTime('complex calculation', block {
 $c = $a + $b;
 $d = $a * $b;
 ...
 $x = $c / $d;
});
echo "Result is $x\n";
\---

If you want to measure time in a block of code with many variables, having *block* support can be very useful. A similar function can also measure memory consumption, etc.

## Catching output
/---code php
function catchOutput(Closure $block) {
  ob_start();
  $block->__invoke();
  return ob_get_clean();
}

$firstNames = array('Alice', 'Bob');
$lastNames = array('Smith', 'Doe');
$code = catchOutput(block {
  foreach($firstNames as $k => $firstName) echo $firstName, ' ', $lastNames[$k], "\n";
});
// $code containts "Alice Smith\nBob Doe\n"
\---

This is just an example and is so easy, that it would be definitely better done in another way, but I just want to show you how a *block* can be used.

## Try these
I was inspired by "Prototype":http://www.prototypejs.org/ JavaScript framework to write the following function. Again, it can be nicely used with *blocks*.

/---code php
/** Tries executing several blocks of code until one has finished successfully
* @param callback Takes any number of arguments where each is a closure or a block
* @return mixed Return value of first successful block; or null when all failed
*/
function tryThese($block1 /*, $block2, $block3 */) {
  foreach(func_get_args() as $block) {
    try {
      return $block->__invoke();
    }
    catch(Exception $e) {}
  }
}
\---

### Summary

*Block*s as I tried to implement them in PHP are to be seen as normal blocks of code when written, but as *closures* when being received by functions. It doesn't bring anything what was not possible in PHP before, just makes some things easier. Also this is very experimental and I'm not sure about what the best syntax would be, and I may change it.

You can try this by compiling my fork of PHP. And as usually, I'll be very glad to see you comments.



----------
## Comments

**Filip Procházka (@HosipLan)** | 2011-07-31
That reminds me of one old system, that we were replacing recently. It was REALY OLD. It was developed by something you could call "include driven development". There were absolutely no functions, or classes what so ever. Every piece of code, that should have been in function or class, was in separate file, some of those files were realy huge and confusing. And they were all interlocked by each other. Just a huge pile of mess.

So what I see from my point of view is, that you're reinventing this "technique" that was ugly years ago, but with nicer way of calling those "codeblocks".

Keep up the good work! 
Your faithful troll Filip ;)


**juzna.cz** | 2011-07-31
I hope noone would use *blocks* for such ugly thing. They will work best with OOP and other commonly used approaches.

They are actually **fine grained** addressable blocks. In Ruby, you can address a class, function and even a single block withing a function. However, in PHP the smallest piece of code which you can address is a function. This brings similar granularity to PHP


**Jakub Vrána** | 2011-08-01
This looks much better than your Lightweight closures even it is practically the same :-). What about making RFC from it just to see what others think about it?

What about eliminating the keyword altogether? Just `repeat(5, { echo $i++; })`.


**juzna.cz** | 2011-08-01
Thank you Jakub. But from previous experience with PHP core developers I'm not really in a mood to try sending them something. I'll fix some bugs and make it cleaner, and then I may try it.

I decided to use a keyword to avoid ambiguity. *Addressable block* must be an *expression*, so that you can assign it to variable or pass to a function. And parser would not know how to work on places where it expects a statement, because there would be two ambiguous derivations:
- `statement -> '{' statement_list '}'` which is a *normal block*
- `statement -> expression -> '{' statement_list '}'` which is an *addressable block*

I think it doesn't make sense to compile all blocks as addressable, and some kind of guessing what kind of block do you mean would be to magic (is possible at all). But I'll try to think about it.


**Vojtěch Dobeš** | 2011-08-04
I don't want to look like troll, but my curiosity is stronger :) What is possible in improvements of PHP like this? I mean would it be lot of extra work to implement syntax using for example double braces or something like that to avoid the keyword?


**juzna.cz** | 2011-08-04
Double braces won't solve anything, you can use even triple braces now if you want (or as many braces as you want), following example is valid code.
/---code php
if($cond) {{{
  echo 'a';
}}}
\---
(I have even seen some people to use triple braces everywhere, but that's another story).

But I'm now playing with PHP's grammar and checking what's possible.
